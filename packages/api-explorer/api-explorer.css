/* Add margin to left- and right-sides of RJSF component. */
form.rjsf {
  margin: 0% 3%;
}

/* Remove borders surrounding params. */
form.rjsf fieldset {
  border: none;
}

/* Ensure nested objects retain full width. */
form.rjsf fieldset fieldset {
  padding: 0;
  width: 100%;
}

/* Remove margin from nested forms (for file uploads). */
form form.rjsf {
  margin: 2% 2%;
}

/* Style table header. */
.param-type-header {
  color: #aeaeae;
  font-size: 14px;
  text-transform: uppercase;
  border-bottom: 1px solid #ddd;
  margin-left: 3%;
}

/* Style param labels. */
form.rjsf .form-group .control-label {
  font-weight: 400;
  text-align: left;
  min-width: 100px;
  padding-right: unset;
  float: left;
  font-weight: bold;
  flex: 1 1 150px;
}

/* Make required asterisks red */
form.rjsf .form-group .required {
  color: #ef6363;
}

/* Style param category labels. */
form.rjsf legend {
  font-weight: bold;
  margin: 10px 0px;
}

/* Style input fields similar to current explorer. */
form.rjsf input {
  border: 1px solid #eaeaea !important;
  border-radius: 2px;
  padding: 8px 10px;
  margin-left: 5px;
}

form.rjsf textarea {
  border: 1px solid #eaeaea !important;
  border-radius: 2px;
  padding: 8px 10px;
  margin-left: 5px;
}

/* Prevent input fields from becoming too wide. */
form.rjsf .form-group .form-control {
  max-width: 250px;
  flex: 1 1 150px;
}

form.rjsf .form-group.field {
  min-height: 60px;
}

/* Align nested input fields. */
form.rjsf fieldset fieldset .form-group.field .field-description {
  margin-left: 1em;
}

/* Add padding and top-border around nested form-groups. */
form.rjsf .form-group .form-group {
  padding-top: 10px;
  padding-bottom: 10px;
  border-top: 1px solid #f2f2f2;
}

/* Hide border for first form-group in an object. */
form.rjsf fieldset .form-group:first-of-type {
  border-top: none;
}

/* Render each object's param container as a flex object.
   Allows for better aligning of fields, labels, etc. */
form.rjsf fieldset .form-group {
  display: flex;
  flex-flow: row nowrap;
  align-items: center;
  align-content: center;
}

/* Parameters for nested objects should be indented. */
form.rjsf fieldset fieldset .form-group {
  padding-left: 1%;
}

form.rjsf fieldset fieldset .form-group label {
  padding-left: 0%;
  margin-left: 0% !important;
}

form.rjsf fieldset fieldset legend {
  padding-left: 0%;
}

/* Allow description to scale to 2x size of input field and
   param titles (some endpoints have lengthy descriptions.
   Also add styling. */
form.rjsf .field-description {
  flex: 2 1 100px;
  text-align: left;
  font-size: 14px !important;
  font-weight: 300;
  margin-bottom: 0px;
}

/* Add thick left border to nested params (show hierarchy). */
form.rjsf fieldset fieldset .form-group {
  border-left: 10px solid #f8f8f8;
}

/* Add margin to label for nested params. */
form.rjsf fieldset fieldset .form-group label {
  margin-left: 1em;
}

form.rjsf .form-group.field select {
  margin-left: 15px;
}

/* Style select boxes. */

form.rjsf .field .form-group select {
  border: 1px solid #eaeaea !important;
  border-radius: 2px;
  padding: 0px 10px;
  margin-left: 15px;
  height: 30px;
}

/* Display arrays as flex containers, don't wrap, center-align vertically. */
.array-item {
  display: flex;
  flex-wrap: nowrap;
  align-items: center;
  align-content: center;
  justify-content: flex-start;
  flex: 1 1 100%;
}

/* Remove left- */
.array-item .form-group.field {
  border-left: none;
}

/* For each nested object in an array, add border. */
.array-item fieldset {
  border-left: 10px solid #f8f8f8;
  box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.025);
  padding-left: 1em;
  padding-right: 1em;
  margin-left: 1em;
}

 /* For each nested object in an array, unset max-width for description. */
 .array-item fieldset .field-description {
  max-width: unset;
  text-align: left;
}

/* For descriptions of arrays or nested objects, right-align and add padding above. */
.field-array > legend {
  text-align: left;
  padding-top: 5px !important;
}

/* Similarly as above, but for .field-description's instead of <legend>'s. */
.field-array > .field-description {
  text-align: left;
}

/* For arrays, override Bootstrap col-xs-9 properties. */
.array-item .col-xs-9 {
  padding: 0px;
  flex-basis: 80%;
  min-width: 200px;
  max-width: 90%;
}

/* Ensure that nested arrays have full-width input fields. */
.array-item .col-xs-9 .form-group .form-control {
  width: 100%;
}

/* Remove left-margins from rows that are offset with Bootstrap's grid system. */
form.rjsf .row .col-xs-offset-9 {
  margin-left: 0px;
}

/* Override Bootstrap properties for "add" button (for arrays). */
.array-item-add.col-xs-3 {
  flex-basis: unset;
  max-width: unset;
  margin-top: 10px;
}

/* For up/down/remove toolbox for items in arrays, change default size. */
.array-item-toolbox.col-xs-3 {
  flex-basis: 12%;
}

/* Align up/down/remove toolbox to the right. */
.array-item-toolbox .btn-group {
  justify-content: flex-start !important;
}

/* Reset padding and remove border + other styles from buttons in up/down/remove toolbox. */
.array-item-toolbox .btn {
  padding-left: 8px;
  padding-right: 8px;
  border: none;
  width: 36px !important;
  height: 36px !important;
  flex: unset !important;
  font-size: 13px;
  background: rgba(255, 255, 255, 0);
}

form.rjsf .btn:active {
  box-shadow: none;
}

form.rjsf .btn:focus {
  outline: none;
}

form.rjsf .btn.btn-default {
  border: none;
}

form.rjsf .btn.btn-default:hover {
  border: none;
}

form.rjsf .btn.btn-add {
  transform: rotate(45deg);
  font-weight: bold;
  font-size: 11px;
  color: rgb(76, 85, 90);
  background: rgba(255, 255, 255, 0);
  margin-bottom: 1em;
}

form.rjsf .btn.btn-add::after {
  content: '✕';
  font-size: 11px;
  font-weight: bold;
}

form.rjsf .btn.array-item-move-up::after {
  content: '↑';
}

form.rjsf .btn.array-item-move-down::after {
  content: '↓';
}

form.rjsf .btn.array-item-remove::after {
  content: '✕';
}

/* Fix color of up/down buttons when disabled. */
form.rjsf button[disabled] {
  color: #d2d2d2 !important;
}

/* Add type labels. */
.field.field-array-of-string legend::after {
  color: rgba(0, 0, 0, 0.6);
  content: 'array of strings';
  background: #f2f2f2;
  border-radius: 3px;
  font-family: 'Proxima Nova', sans-serif;
  font-size: 11px;
  font-weight: lighter;
  margin-left: 10px;
  padding: 3px 6px;
}

.field.field-array-of-integer legend::after {
  color: rgba(0, 0, 0, 0.6);
  content: 'array of integers';
  background: #f2f2f2;
  border-radius: 3px;
  font-family: 'Proxima Nova', sans-serif;
  font-size: 11px;
  font-weight: lighter;
  margin-left: 10px;
  padding: 3px 6px;
}

.field.field-array-of-object > legend::after {
  color: rgba(0, 0, 0, 0.6);
  content: 'array of objects';
  background: #f2f2f2;
  border-radius: 3px;
  font-family: 'Proxima Nova', sans-serif;
  font-size: 11px;
  font-weight: lighter;
  margin-left: 10px;
  padding: 3px 6px;
}

fieldset[id^='root_array of objects_'] > legend::after {
  content: 'object';
  color: rgba(0, 0, 0, 0.6);
  background: #f2f2f2;
  border-radius: 3px;
  font-family: 'Proxima Nova', sans-serif;
  font-size: 11px;
  font-weight: lighter;
  margin-left: 10px;
  padding: 3px 6px;
}

.field.field-array-of-boolean legend::after {
  color: rgba(0, 0, 0, 0.6);
  content: 'array of booleans';
  background: #f2f2f2;
  border-radius: 3px;
  font-family: 'Proxima Nova', sans-serif;
  font-size: 11px;
  font-weight: lighter;
  margin-left: 10px;
  padding: 3px 6px;
}

.field.field-integer.field-int8 label::after {
  color: rgba(0, 0, 0, 0.6);
  content: 'integer: int8';
  background: #f2f2f2;
  border-radius: 3px;
  font-family: 'Proxima Nova', sans-serif;
  font-size: 11px;
  font-weight: lighter;
  margin-left: 10px;
  padding: 3px 6px;
}

.field.field-integer.field-uint8 label::after {
  color: rgba(0, 0, 0, 0.6);
  content: 'integer: uint8';
  background: #f2f2f2;
  border-radius: 3px;
  font-family: 'Proxima Nova', sans-serif;
  font-size: 11px;
  font-weight: lighter;
  margin-left: 10px;
  padding: 3px 6px;
}

.field.field-integer.field-int16 label::after {
  color: rgba(0, 0, 0, 0.6);
  content: 'integer: int16';
  background: #f2f2f2;
  border-radius: 3px;
  font-family: 'Proxima Nova', sans-serif;
  font-size: 11px;
  font-weight: lighter;
  margin-left: 10px;
  padding: 3px 6px;
}

.field.field-integer.field-uint16 label::after {
  color: rgba(0, 0, 0, 0.6);
  content: 'integer: uint16';
  background: #f2f2f2;
  border-radius: 3px;
  font-family: 'Proxima Nova', sans-serif;
  font-size: 11px;
  font-weight: lighter;
  margin-left: 10px;
  padding: 3px 6px;
}

.field.field-integer.field-int32 label::after {
  color: rgba(0, 0, 0, 0.6);
  content: 'integer: int32';
  background: #f2f2f2;
  border-radius: 3px;
  font-family: 'Proxima Nova', sans-serif;
  font-size: 11px;
  font-weight: lighter;
  margin-left: 10px;
  padding: 3px 6px;
}

.field.field-integer.field-uint32 label::after {
  color: rgba(0, 0, 0, 0.6);
  content: 'integer: uint32';
  background: #f2f2f2;
  border-radius: 3px;
  font-family: 'Proxima Nova', sans-serif;
  font-size: 11px;
  font-weight: lighter;
  margin-left: 10px;
  padding: 3px 6px;
}

.field.field-integer.field-int64 label::after {
  color: rgba(0, 0, 0, 0.6);
  content: 'integer: int64';
  background: #f2f2f2;
  border-radius: 3px;
  font-family: 'Proxima Nova', sans-serif;
  font-size: 11px;
  font-weight: lighter;
  margin-left: 10px;
  padding: 3px 6px;
}

.field.field-integer.field-uint64 label::after {
  color: rgba(0, 0, 0, 0.6);
  content: 'integer: uint64';
  background: #f2f2f2;
  border-radius: 3px;
  font-family: 'Proxima Nova', sans-serif;
  font-size: 11px;
  font-weight: lighter;
  margin-left: 10px;
  padding: 3px 6px;
}

.field.field-number.field-float label::after {
  color: rgba(0, 0, 0, 0.6);
  content: 'number: float';
  background: #f2f2f2;
  border-radius: 3px;
  font-family: 'Proxima Nova', sans-serif;
  font-size: 11px;
  font-weight: lighter;
  margin-left: 10px;
  padding: 3px 6px;
}

.field.field-number.field-double label::after {
  color: rgba(0, 0, 0, 0.6);
  content: 'number: double';
  background: #f2f2f2;
  border-radius: 3px;
  font-family: 'Proxima Nova', sans-serif;
  font-size: 11px;
  font-weight: lighter;
  margin-left: 10px;
  padding: 3px 6px;
}

.field.field-string:not(.field-json):not(.field-file) label::after {
  color: rgba(0, 0, 0, 0.6);
  content: 'string';
  background: #f2f2f2;
  border-radius: 3px;
  font-family: 'Proxima Nova', sans-serif;
  font-size: 11px;
  font-weight: lighter;
  margin-left: 10px;
  padding: 3px 6px;
}

.field.field-json label::after {
  color: rgba(0, 0, 0, 0.6);
  content: 'json';
  background: #f2f2f2;
  border-radius: 3px;
  font-family: 'Proxima Nova', sans-serif;
  font-size: 11px;
  font-weight: lighter;
  margin-left: 10px;
  padding: 3px 6px;
}

.field.field-file label::after {
  color: rgba(0, 0, 0, 0.6);
  content: 'file';
  background: #f2f2f2;
  border-radius: 3px;
  font-family: 'Proxima Nova', sans-serif;
  font-size: 11px;
  font-weight: lighter;
  margin-left: 10px;
  padding: 3px 6px;
}

.field.field-boolean label::after {
  color: rgba(0, 0, 0, 0.6);
  content: 'boolean';
  background: #f2f2f2;
  border-radius: 3px;
  font-family: 'Proxima Nova', sans-serif;
  font-size: 11px;
  font-weight: lighter;
  margin-left: 10px;
  padding: 3px 6px;
}

/* Fix spacing on input fields. */
form.rjsf input[type='file'] {
  font-size: 0.8em;
  border: none !important;
  margin-left: 0px;
  padding: 10px;
}

/* Fix alignment of input field. */
.form-group.field p {
  margin-bottom: 0px;
}

/* Ensure top-level elements are vertically centered within their form-group's,
   and that all input fields take advantage of available width. */

form.rjsf fieldset {
  padding: 0em 0.625em 0.75em;
  width: 100%;
}

.form-group.field {
  display: flex;
  justify-content: flex-start;
  align-content: center;
  align-items: center;
}

/*TODO fix this*/
/*.array-item .field-string::before {
  content: 'string';
  font-weight: lighter;
  float: right;
  margin-right: 3%;
}*/

.response-schema {
  overflow-y: auto;
}

.hub-reference-response-definitions.dark p,
.hub-reference-response-definitions.dark h3,
.hub-reference-response-definitions.dark th,
.hub-reference-response-definitions.dark td {
  color: rgba(255,255,255,0.7);
}

.string-value {
  word-break: break-all;
}
