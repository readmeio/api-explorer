// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`multipart/form-data handlings should convert a multipart/form-data operation into a proper snippet that uses the original file 1`] = `
Object {
  "code": "curl --request POST \\\\
  --url https://example.com/multipart \\\\
  --header 'Content-Type: multipart/form-data; boundary=---011000010111000001101001' \\\\
  --form orderId=10 \\\\
  --form userId=3232 \\\\
  --form documentFile=@owlbert.png",
  "highlightMode": "shell",
}
`;

exports[`should be able to accept a har override 1`] = `
Object {
  "code": "const { URLSearchParams } = require('url');
const fetch = require('node-fetch');
const encodedParams = new URLSearchParams();

encodedParams.set('foo', 'bar');

const url = 'http://mockbin.com/har?foo=bar&foo=baz&baz=abc&key=value';
const options = {
  method: 'POST',
  headers: {
    accept: 'application/json',
    'content-type': 'application/x-www-form-urlencoded',
    cookie: 'foo=bar; bar=baz; '
  },
  body: encodedParams
};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));",
  "highlightMode": "javascript",
}
`;

exports[`supported languages c should generate code for the default target 1`] = `
Object {
  "code": "CURL *hnd = curl_easy_init();

curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \\"GET\\");
curl_easy_setopt(hnd, CURLOPT_URL, \\"https://example.com/path/123\\");

CURLcode ret = curl_easy_perform(hnd);",
  "highlightMode": "text/x-csrc",
}
`;

exports[`supported languages c targets c 1`] = `
Object {
  "code": "CURL *hnd = curl_easy_init();

curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \\"GET\\");
curl_easy_setopt(hnd, CURLOPT_URL, \\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\");

struct curl_slist *headers = NULL;
headers = curl_slist_append(headers, \\"Accept: application/xml\\");
curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

CURLcode ret = curl_easy_perform(hnd);",
  "highlightMode": "text/x-csrc",
}
`;

exports[`supported languages clojure should generate code for the default target 1`] = `
Object {
  "code": "(require '[clj-http.client :as client])

(client/get \\"https://example.com/path/123\\")",
  "highlightMode": "clojure",
}
`;

exports[`supported languages clojure targets clojure 1`] = `
Object {
  "code": "(require '[clj-http.client :as client])

(client/get \\"http://petstore.swagger.io/v2/user/login\\" {:headers {:Accept \\"application/xml\\"}
                                                        :query-params {:username \\"woof\\"
                                                                       :password \\"barkbarkbark\\"}})",
  "highlightMode": "clojure",
}
`;

exports[`supported languages cplusplus should generate code for the default target 1`] = `
Object {
  "code": "CURL *hnd = curl_easy_init();

curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \\"GET\\");
curl_easy_setopt(hnd, CURLOPT_URL, \\"https://example.com/path/123\\");

CURLcode ret = curl_easy_perform(hnd);",
  "highlightMode": "text/x-c++src",
}
`;

exports[`supported languages cplusplus targets c 1`] = `
Object {
  "code": "CURL *hnd = curl_easy_init();

curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \\"GET\\");
curl_easy_setopt(hnd, CURLOPT_URL, \\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\");

struct curl_slist *headers = NULL;
headers = curl_slist_append(headers, \\"Accept: application/xml\\");
curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

CURLcode ret = curl_easy_perform(hnd);",
  "highlightMode": "text/x-c++src",
}
`;

exports[`supported languages csharp should generate code for the default target 1`] = `
Object {
  "code": "var client = new RestClient(\\"https://example.com/path/123\\");
var request = new RestRequest(Method.GET);
IRestResponse response = client.Execute(request);",
  "highlightMode": "text/x-csharp",
}
`;

exports[`supported languages csharp targets httpclient 1`] = `
Object {
  "code": "var client = new HttpClient();
var request = new HttpRequestMessage
{
    Method = HttpMethod.Get,
    RequestUri = new Uri(\\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\"),
    Headers =
    {
        { \\"Accept\\", \\"application/xml\\" },
    },
};
using (var response = await client.SendAsync(request))
{
    response.EnsureSuccessStatusCode();
    var body = await response.Content.ReadAsStringAsync();
    Console.WriteLine(body);
}",
  "highlightMode": "text/x-csharp",
}
`;

exports[`supported languages csharp targets restsharp 1`] = `
Object {
  "code": "var client = new RestClient(\\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\");
var request = new RestRequest(Method.GET);
request.AddHeader(\\"Accept\\", \\"application/xml\\");
IRestResponse response = client.Execute(request);",
  "highlightMode": "text/x-csharp",
}
`;

exports[`supported languages curl should generate code for the default target 1`] = `
Object {
  "code": "curl --request GET \\\\
  --url https://example.com/path/123",
  "highlightMode": "shell",
}
`;

exports[`supported languages curl targets curl 1`] = `
Object {
  "code": "curl --request GET \\\\
  --url 'http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark' \\\\
  --header 'Accept: application/xml'",
  "highlightMode": "shell",
}
`;

exports[`supported languages go should generate code for the default target 1`] = `
Object {
  "code": "package main

import (
	\\"fmt\\"
	\\"net/http\\"
	\\"io/ioutil\\"
)

func main() {

	url := \\"https://example.com/path/123\\"

	req, _ := http.NewRequest(\\"GET\\", url, nil)

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}",
  "highlightMode": "go",
}
`;

exports[`supported languages go targets native 1`] = `
Object {
  "code": "package main

import (
	\\"fmt\\"
	\\"net/http\\"
	\\"io/ioutil\\"
)

func main() {

	url := \\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\"

	req, _ := http.NewRequest(\\"GET\\", url, nil)

	req.Header.Add(\\"Accept\\", \\"application/xml\\")

	res, _ := http.DefaultClient.Do(req)

	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	fmt.Println(res)
	fmt.Println(string(body))

}",
  "highlightMode": "go",
}
`;

exports[`supported languages java should generate code for the default target 1`] = `
Object {
  "code": "OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url(\\"https://example.com/path/123\\")
  .get()
  .build();

Response response = client.newCall(request).execute();",
  "highlightMode": "java",
}
`;

exports[`supported languages java targets asynchttp 1`] = `
Object {
  "code": "AsyncHttpClient client = new DefaultAsyncHttpClient();
client.prepare(\\"GET\\", \\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\")
  .setHeader(\\"Accept\\", \\"application/xml\\")
  .execute()
  .toCompletableFuture()
  .thenAccept(System.out::println)
  .join();

client.close();",
  "highlightMode": "java",
}
`;

exports[`supported languages java targets nethttp 1`] = `
Object {
  "code": "HttpRequest request = HttpRequest.newBuilder()
    .uri(URI.create(\\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\"))
    .header(\\"Accept\\", \\"application/xml\\")
    .method(\\"GET\\", HttpRequest.BodyPublishers.noBody())
    .build();
HttpResponse<String> response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());
System.out.println(response.body());",
  "highlightMode": "java",
}
`;

exports[`supported languages java targets okhttp 1`] = `
Object {
  "code": "OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url(\\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\")
  .get()
  .addHeader(\\"Accept\\", \\"application/xml\\")
  .build();

Response response = client.newCall(request).execute();",
  "highlightMode": "java",
}
`;

exports[`supported languages java targets unirest 1`] = `
Object {
  "code": "HttpResponse<String> response = Unirest.get(\\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\")
  .header(\\"Accept\\", \\"application/xml\\")
  .asString();",
  "highlightMode": "java",
}
`;

exports[`supported languages javascript should generate code for the default target 1`] = `
Object {
  "code": "const options = {method: 'GET'};

fetch('https://example.com/path/123', options)
  .then(response => response.json())
  .then(response => console.log(response))
  .catch(err => console.error(err));",
  "highlightMode": "javascript",
}
`;

exports[`supported languages javascript targets axios 1`] = `
Object {
  "code": "import axios from \\"axios\\";

const options = {
  method: 'GET',
  url: 'http://petstore.swagger.io/v2/user/login',
  params: {username: 'woof', password: 'barkbarkbark'},
  headers: {Accept: 'application/xml'}
};

axios.request(options).then(function (response) {
  console.log(response.data);
}).catch(function (error) {
  console.error(error);
});",
  "highlightMode": "javascript",
}
`;

exports[`supported languages javascript targets fetch 1`] = `
Object {
  "code": "const options = {method: 'GET', headers: {Accept: 'application/xml'}};

fetch('http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark', options)
  .then(response => response.json())
  .then(response => console.log(response))
  .catch(err => console.error(err));",
  "highlightMode": "javascript",
}
`;

exports[`supported languages javascript targets jquery 1`] = `
Object {
  "code": "const settings = {
  \\"async\\": true,
  \\"crossDomain\\": true,
  \\"url\\": \\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\",
  \\"method\\": \\"GET\\",
  \\"headers\\": {
    \\"Accept\\": \\"application/xml\\"
  }
};

$.ajax(settings).done(function (response) {
  console.log(response);
});",
  "highlightMode": "javascript",
}
`;

exports[`supported languages javascript targets xhr 1`] = `
Object {
  "code": "const data = null;

const xhr = new XMLHttpRequest();
xhr.withCredentials = true;

xhr.addEventListener(\\"readystatechange\\", function () {
  if (this.readyState === this.DONE) {
    console.log(this.responseText);
  }
});

xhr.open(\\"GET\\", \\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\");
xhr.setRequestHeader(\\"Accept\\", \\"application/xml\\");

xhr.send(data);",
  "highlightMode": "javascript",
}
`;

exports[`supported languages kotlin should generate code for the default target 1`] = `
Object {
  "code": "OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url(\\"https://example.com/path/123\\")
  .get()
  .build();

Response response = client.newCall(request).execute();",
  "highlightMode": "java",
}
`;

exports[`supported languages kotlin targets okhttp 1`] = `
Object {
  "code": "OkHttpClient client = new OkHttpClient();

Request request = new Request.Builder()
  .url(\\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\")
  .get()
  .addHeader(\\"Accept\\", \\"application/xml\\")
  .build();

Response response = client.newCall(request).execute();",
  "highlightMode": "java",
}
`;

exports[`supported languages node should generate code for the default target 1`] = `
Object {
  "code": "const fetch = require('node-fetch');

const url = 'https://example.com/path/123';
const options = {method: 'GET'};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));",
  "highlightMode": "javascript",
}
`;

exports[`supported languages node targets api 1`] = `
Object {
  "code": "const sdk = require('api')('https://example.com/openapi.json');

sdk.loginUser({username: 'woof', password: 'barkbarkbark', Accept: 'application/xml'})
  .then(res => console.log(res))
  .catch(err => console.error(err));",
  "highlightMode": "javascript",
}
`;

exports[`supported languages node targets axios 1`] = `
Object {
  "code": "var axios = require(\\"axios\\").default;

var options = {
  method: 'GET',
  url: 'http://petstore.swagger.io/v2/user/login',
  params: {username: 'woof', password: 'barkbarkbark'},
  headers: {Accept: 'application/xml'}
};

axios.request(options).then(function (response) {
  console.log(response.data);
}).catch(function (error) {
  console.error(error);
});",
  "highlightMode": "javascript",
}
`;

exports[`supported languages node targets fetch 1`] = `
Object {
  "code": "const fetch = require('node-fetch');

const url = 'http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark';
const options = {method: 'GET', headers: {Accept: 'application/xml'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));",
  "highlightMode": "javascript",
}
`;

exports[`supported languages node targets native 1`] = `
Object {
  "code": "const http = require(\\"http\\");

const options = {
  \\"method\\": \\"GET\\",
  \\"hostname\\": \\"petstore.swagger.io\\",
  \\"port\\": null,
  \\"path\\": \\"/v2/user/login?username=woof&password=barkbarkbark\\",
  \\"headers\\": {
    \\"Accept\\": \\"application/xml\\"
  }
};

const req = http.request(options, function (res) {
  const chunks = [];

  res.on(\\"data\\", function (chunk) {
    chunks.push(chunk);
  });

  res.on(\\"end\\", function () {
    const body = Buffer.concat(chunks);
    console.log(body.toString());
  });
});

req.end();",
  "highlightMode": "javascript",
}
`;

exports[`supported languages node targets request 1`] = `
Object {
  "code": "const request = require('request');

const options = {
  method: 'GET',
  url: 'http://petstore.swagger.io/v2/user/login',
  qs: {username: 'woof', password: 'barkbarkbark'},
  headers: {Accept: 'application/xml'}
};

request(options, function (error, response, body) {
  if (error) throw new Error(error);

  console.log(body);
});
",
  "highlightMode": "javascript",
}
`;

exports[`supported languages objectivec should generate code for the default target 1`] = `
Object {
  "code": "#import <Foundation/Foundation.h>

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\\"https://example.com/path/123\\"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@\\"GET\\"];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@\\"%@\\", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@\\"%@\\", httpResponse);
                                                }
                                            }];
[dataTask resume];",
  "highlightMode": "objectivec",
}
`;

exports[`supported languages objectivec targets nsurlsession 1`] = `
Object {
  "code": "#import <Foundation/Foundation.h>

NSDictionary *headers = @{ @\\"Accept\\": @\\"application/xml\\" };

NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\"]
                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy
                                                   timeoutInterval:10.0];
[request setHTTPMethod:@\\"GET\\"];
[request setAllHTTPHeaderFields:headers];

NSURLSession *session = [NSURLSession sharedSession];
NSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request
                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
                                                if (error) {
                                                    NSLog(@\\"%@\\", error);
                                                } else {
                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;
                                                    NSLog(@\\"%@\\", httpResponse);
                                                }
                                            }];
[dataTask resume];",
  "highlightMode": "objectivec",
}
`;

exports[`supported languages ocaml should generate code for the default target 1`] = `
Object {
  "code": "open Cohttp_lwt_unix
open Cohttp
open Lwt

let uri = Uri.of_string \\"https://example.com/path/123\\" in

Client.call \`GET uri
>>= fun (res, body_stream) ->
  (* Do stuff with the result *)",
  "highlightMode": "ocaml",
}
`;

exports[`supported languages ocaml targets ocaml 1`] = `
Object {
  "code": "open Cohttp_lwt_unix
open Cohttp
open Lwt

let uri = Uri.of_string \\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\" in
let headers = Header.add (Header.init ()) \\"Accept\\" \\"application/xml\\" in

Client.call ~headers \`GET uri
>>= fun (res, body_stream) ->
  (* Do stuff with the result *)",
  "highlightMode": "ocaml",
}
`;

exports[`supported languages php should generate code for the default target 1`] = `
Object {
  "code": "<?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL => \\"https://example.com/path/123\\",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => \\"\\",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 30,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => \\"GET\\",
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo \\"cURL Error #:\\" . $err;
} else {
  echo $response;
}",
  "highlightMode": "php",
}
`;

exports[`supported languages php targets curl 1`] = `
Object {
  "code": "<?php

$curl = curl_init();

curl_setopt_array($curl, [
  CURLOPT_URL => \\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => \\"\\",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 30,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => \\"GET\\",
  CURLOPT_HTTPHEADER => [
    \\"Accept: application/xml\\"
  ],
]);

$response = curl_exec($curl);
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo \\"cURL Error #:\\" . $err;
} else {
  echo $response;
}",
  "highlightMode": "php",
}
`;

exports[`supported languages powershell should generate code for the default target 1`] = `
Object {
  "code": "$response = Invoke-WebRequest -Uri 'https://example.com/path/123' -Method GET ",
  "highlightMode": "powershell",
}
`;

exports[`supported languages powershell targets powershell 1`] = `
Object {
  "code": "$headers=@{}
$headers.Add(\\"Accept\\", \\"application/xml\\")
$response = Invoke-WebRequest -Uri 'http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark' -Method GET -Headers $headers",
  "highlightMode": "powershell",
}
`;

exports[`supported languages python should generate code for the default target 1`] = `
Object {
  "code": "import requests

url = \\"https://example.com/path/123\\"

response = requests.request(\\"GET\\", url)

print(response.text)",
  "highlightMode": "python",
}
`;

exports[`supported languages python targets requests 1`] = `
Object {
  "code": "import requests

url = \\"http://petstore.swagger.io/v2/user/login\\"

querystring = {\\"username\\":\\"woof\\",\\"password\\":\\"barkbarkbark\\"}

headers = {\\"Accept\\": \\"application/xml\\"}

response = requests.request(\\"GET\\", url, headers=headers, params=querystring)

print(response.text)",
  "highlightMode": "python",
}
`;

exports[`supported languages r should generate code for the default target 1`] = `
Object {
  "code": "library(httr)

url <- \\"https://example.com/path/123\\"

response <- VERB(\\"GET\\", url, content_type(\\"application/octet-stream\\"))

content(response, \\"text\\")",
  "highlightMode": "r",
}
`;

exports[`supported languages r targets r 1`] = `
Object {
  "code": "library(httr)

url <- \\"http://petstore.swagger.io/v2/user/login\\"

queryString <- list(
  username = \\"woof\\"
  password = \\"barkbarkbark\\",
)

response <- VERB(\\"GET\\", url, query = queryString, content_type(\\"application/octet-stream\\"), accept(\\"application/xml\\"))

content(response, \\"text\\")",
  "highlightMode": "r",
}
`;

exports[`supported languages ruby should generate code for the default target 1`] = `
Object {
  "code": "require 'uri'
require 'net/http'
require 'openssl'

url = URI(\\"https://example.com/path/123\\")

http = Net::HTTP.new(url.host, url.port)
http.use_ssl = true

request = Net::HTTP::Get.new(url)

response = http.request(request)
puts response.read_body",
  "highlightMode": "ruby",
}
`;

exports[`supported languages ruby targets ruby 1`] = `
Object {
  "code": "require 'uri'
require 'net/http'

url = URI(\\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\")

http = Net::HTTP.new(url.host, url.port)

request = Net::HTTP::Get.new(url)
request[\\"Accept\\"] = 'application/xml'

response = http.request(request)
puts response.read_body",
  "highlightMode": "ruby",
}
`;

exports[`supported languages swift should generate code for the default target 1`] = `
Object {
  "code": "import Foundation

let request = NSMutableURLRequest(url: NSURL(string: \\"https://example.com/path/123\\")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = \\"GET\\"

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()",
  "highlightMode": "swift",
}
`;

exports[`supported languages swift targets nsurlsession 1`] = `
Object {
  "code": "import Foundation

let headers = [\\"Accept\\": \\"application/xml\\"]

let request = NSMutableURLRequest(url: NSURL(string: \\"http://petstore.swagger.io/v2/user/login?username=woof&password=barkbarkbark\\")! as URL,
                                        cachePolicy: .useProtocolCachePolicy,
                                    timeoutInterval: 10.0)
request.httpMethod = \\"GET\\"
request.allHTTPHeaderFields = headers

let session = URLSession.shared
let dataTask = session.dataTask(with: request as URLRequest, completionHandler: { (data, response, error) -> Void in
  if (error != nil) {
    print(error)
  } else {
    let httpResponse = response as? HTTPURLResponse
    print(httpResponse)
  }
})

dataTask.resume()",
  "highlightMode": "swift",
}
`;
