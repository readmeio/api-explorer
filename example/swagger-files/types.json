{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "http://httpbin.org"
    }
  ],
  "info": {
    "version": "1.0.0",
    "title": "An example of how we render different data types"
  },
  "paths": {
    "/anything/primitive-types": {
      "post": {
        "summary": "Primitive data types",
        "description": "",
        "parameters": [],
        "responses": {},
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "string": {
                    "type": "string",
                    "description": "This is a string with a description"
                  },
                  "string with markdown description": {
                    "type": "string",
                    "description": "This is a string with a **markdown** description: [link](ref:action-object)"
                  },
                  "string without description": {
                    "type": "string"
                  },
                  "string with default value": {
                    "type": "string",
                    "default": "default value"
                  },
                  "string (format: binary) (not sure this will work)": {
                    "type": "string",
                    "format": "binary"
                  },
                  "string (format: json)": {
                    "description": "This is a special ReadMe type to render a <textarea> to be parsed as JSON",
                    "type": "string",
                    "format": "json"
                  },
                  "string (format: date)": {
                    "type": "string",
                    "format": "date"
                  },
                  "string (format: date-time)": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "string (format: string)": {
                    "type": "string",
                    "format": "string"
                  },
                  "string (format: url)": {
                    "type": "string",
                    "format": "url"
                  },
                  "string (format: unknown-format)": {
                    "type": "string",
                    "format": "unknown-format"
                  },
                  "string (enum)": {
                    "type": "string",
                    "enum": ["available", "pending", "sold"]
                  },
                  "string (enum, with default)": {
                    "type": "string",
                    "enum": ["available", "pending", "sold"],
                    "default": "available"
                  },
                  "integer": {
                    "type": "integer",
                    "format": "int64",
                    "description": "This is an integer with a description"
                  },
                  "integer without description": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "integer (format: int8)": {
                    "type": "integer",
                    "format": "int8"
                  },
                  "integer (format: uint8)": {
                    "type": "integer",
                    "format": "uint8"
                  },
                  "integer (format: int16)": {
                    "type": "integer",
                    "format": "int16"
                  },
                  "integer (format: uint16)": {
                    "type": "integer",
                    "format": "uint16"
                  },
                  "integer (format: int32)": {
                    "type": "integer",
                    "format": "int32"
                  },
                  "integer (format: uint32)": {
                    "type": "integer",
                    "format": "uint32"
                  },
                  "integer (format: int64)": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "integer (format: uint64)": {
                    "type": "integer",
                    "format": "uint64"
                  },
                  "integer without `format`": {
                    "type": "integer"
                  },
                  "number (format: float)": {
                    "type": "number",
                    "format": "float"
                  },
                  "number (format: double)": {
                    "type": "number",
                    "format": "double"
                  },
                  "number without `format`": {
                    "type": "number"
                  },
                  "boolean": {
                    "type": "boolean",
                    "description": "This is an boolean with a description"
                  },
                  "boolean without description": {
                    "type": "boolean"
                  },
                  "array (of strings)": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "array (of strings, loaded via a $ref)": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/string_enum"
                    }
                  },
                  "array (of objects)": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "string": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "object": {
                    "type": "object",
                    "description": "This is an object with a description",
                    "properties": {
                      "string inside object": {
                        "type": "string",
                        "description": "This is a string with a description"
                      },
                      "nested object": {
                        "type": "object",
                        "properties": {
                          "string": {
                            "type": "string"
                          }
                        }
                      },
                      "array inside object": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "object without description": {
                    "type": "object",
                    "properties": {
                      "string inside object without description": {
                        "type": "string"
                      }
                    }
                  },
                  "object without type": {
                    "description": "Updated status of the pet",
                    "properties": {
                      "property1": {
                        "type": "integer",
                        "format": "int64"
                      },
                      "property2": {
                        "type": "integer",
                        "format": "int64"
                      }
                    }
                  },
                  "object with `additionalProperties: true`": {
                    "type": "object",
                    "additionalProperties": true
                  },
                  "object without `properties`": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/anything/arrays": {
      "post": {
        "summary": "Arrays of different data types",
        "description": "",
        "parameters": [],
        "responses": {},
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "array of strings": {
                    "type": "array",
                    "description": "This is an array of strings with a description",
                    "items": {
                      "type": "string"
                    }
                  },
                  "array without description": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "array of integers": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int64"
                    }
                  },
                  "array of booleans": {
                    "type": "array",
                    "items": {
                      "type": "boolean"
                    }
                  },
                  "array of objects": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64"
                        },
                        "name": {
                          "type": "string"
                        },
                        "object": {
                          "type": "object",
                          "properties": {
                            "a": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/anything/circular-reference": {
      "post": {
        "summary": "Circular reference inside object",
        "description": "",
        "parameters": [],
        "responses": {},
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "circular": {
                    "$ref": "#/components/requestBodies/Circular"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/anything/top-level-string": {
      "post": {
        "summary": "Top level string property",
        "description": "",
        "parameters": [],
        "responses": {},
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/anything/top-level-integer": {
      "post": {
        "summary": "Top level integer property",
        "description": "",
        "parameters": [],
        "responses": {},
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        }
      }
    },
    "/anything/top-level-boolean": {
      "post": {
        "summary": "Top level boolean property",
        "description": "",
        "parameters": [],
        "responses": {},
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "boolean"
              }
            }
          }
        }
      }
    },
    "/anything/top-level-array-of-objects": {
      "post": {
        "summary": "Top level array of objects",
        "description": "",
        "parameters": [],
        "responses": {},
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64"
                    },
                    "name": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/anything/top-level-array-of-primitives": {
      "post": {
        "summary": "Top level array of primitives",
        "description": "",
        "parameters": [],
        "responses": {},
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/anything/top-level-circular-reference": {
      "post": {
        "summary": "Top level circular reference",
        "description": "",
        "parameters": [],
        "responses": {},
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/Circular"
              }
            }
          }
        }
      }
    },
    "/anything/top-level-using-raw-body-string": {
      "post": {
        "summary": "RAW_BODY string",
        "description": "This is a special value on ReadMe to denote a top level property. This can be done better using JSON Schema, but from ReadMe's dash, this is the only way to do it",
        "parameters": [],
        "responses": {},
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "RAW_BODY": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/anything/top-level-using-raw-body-json": {
      "post": {
        "summary": "RAW_BODY json",
        "description": "This is a special value on ReadMe to denote a top level property. This can be done better using JSON Schema, but from ReadMe's dash, this is the only way to do it",
        "parameters": [],
        "responses": {},
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "RAW_BODY": {
                    "type": "string",
                    "format": "json"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "x-explorer-enabled": true,
  "x-samples-enabled": true,
  "x-samples-languages": ["curl", "node", "ruby", "javascript", "python"],
  "components": {
    "schemas": {
      "string_enum": {
        "name": "string",
        "enum": [
          "available",
          "pending",
          "sold"
        ],
        "type": "string"
      }
    },
    "requestBodies": {
      "Circular": {
        "type": "object",
        "properties": {
          "string": {
            "type": "string"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/requestBodies/Circular"
            }
          }
        }
      }
    }
  }
}
